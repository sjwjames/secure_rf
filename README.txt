____________________________________________________________________________

  	  SECURE LOGISTIC REGRESSION TRAINING IN 
	3 PARTY MPC SETTING W/ TRUSTED INITIALIZER 

					 READ ME	
____________________________________________________________________________

The settings files for each role (Trusted Initializer, Party 0, and Party 1) are pre-configured at the time of download to train the logistic regression model on a particular fold from the BC-TCGA or GSE2034 data sets over LAN. With a few modifications to the settings files, the logistic regression model can be trained for folds 1-5 of both of these data sets.

_____________________________________________________________________________

USING THIS README: 

- Follow the instructions in sections (1) and (5) of "BUILD, CONFIGURATION, & EXECUTION INSTRUCTIONS" to build and execute the logistic regression model

- Follow instructions in sections (2) thru (4) of "BUILD, CONFIGURATION, & EXECUTION INSTRUCTIONS" if you need to:
	- select which fold and data set are used for training, or
	- customize the IP addresses and port numbers of the computing parties 

- Follow the instructions in "TEST THE ACCURACY OF A TRAINED MODEL" to validate the weights generated by logistic regression training against a test set (in the clear).

- Follow the instructions in "CONFIGURE A NEW DATA SET FOR SECURE LR TRAINING" to configure training for a data set other than BC-TCGA or GSE2034


Note for developers: If 'debug_output' is set to true in the settings/*.toml files, the parties will reveal their secret shares
					 throughout execution to make debugging easier -- THIS COMPROMISES SECURITY and should only be used while developing.

______________________________________________________________________________

BUILD, CONFIGURATION, & EXECUTION INSTRUCTIONS
______________________________________________________________________________

(1) SETUP: from each machine, in the main project directory, enter the command: 
			'cargo build --release'
	(a) if successful, stdout will show: 'Finished release [optimized] target(s) in <time>s'

(2) TRUSTED INITIALIZER: from the machine designated to play the role of TI:
	(a) open settings/TI.toml in a text editor
	(b) under #[role], verify that ti = true
	(c) under #[network], set:
		(I)   set ti_ip to the IP address of this machine
	 	(II)  set ti_port0 to an available port
	 	(III) set ti_port1 to a different available port
	(d) if training with the BC-TCGA data set, verify that all parameters under:
		(I)  #[BC_TCGA] are un-commented
		(II) #[GSE2034] are commented
	(e) if training with the GSE2034 data set, verify that all parameters under:
		(I)  #[BC_TCGA] are commented
		(II) #[GSE2034] are un-commented
	NOTE: .toml files use '#' for line comments
	(f) if training with a different data set, follow instructions from ()

(3) PARTY 0: from the machine designated to play the role of Party 0,
	(a) open settings/Party0.toml
	(b) under #[role], verify that:
		(I)  ti = false
		(II) party_id = 0
	(c) under #[network], set:
		(I)   ti_ip to the same IP used in (2)(c)(I)
		(II)  ti_port0 to the same port used in (2)(c)(II)
		(III) ti_port1 to the same port used in (2)(c)(III)
		(IV)  party0_ip to the IP address of this machine
		(V)   party0_port to an available port
		(VI)  party1_ip to the IP address of the machine designated to play the role of Party 1
		(VII) party1_port to an available port
	(d) if training with BC_TCGA or GSE2034, under #[LOGISTIC REGRESSION] verify that:
		(I)   decimal_precision = 10
		(II)  integer prevision = 15
		(III) learning_rate = 0.001
	(e) if training with a different data set, follow instructions from ()
	(f) decide which fold to train with (any value 1-5) hence referred to as "FOLD NO."
	(g) if training with BC-TCGA, under #[BC-TCGA] verify that:
		(I)   x_input_path = "/inputs/BC_TCGA_5_folds/<FOLD NO.>X_train_share0.csv" 
		(II)  y_input_path = "/inputs/BC_TCGA_5_folds/<FOLD NO.>y_train_share0.csv"
		(III) output_path = "/weights/BC_TCGA_5_folds/fold_<FOLD NO.>_weights.csv"
		(IV)  all subsequent parameters in the section are un-commented
		(V)   verify that all parameters under #[GSE2034] are commented
	(h) if training with GSE2034, under #[GSE2034] verify that:
		(I)   x_input_path = "/inputs/GSE2034_5_folds/<FOLD NO.>X_train_share0.csv" 
		(II)  y_input_path = "/inputs/GSE2034_5_folds/<FOLD NO.>y_train_share0.csv"
		(III) output_path = "/weights/GSE2034_5_folds/fold_<FOLD NO.>_weights.csv"
		(IV)  all subsequent parameters in the section are un-commented
		(V)   verify that all parameters under #[BC-TCGA] are commented

(4) PARTY 1: from the machine designated to play the role of Party 1,
	(a) open settings/Party1.toml
	(b) under #[role], verify that:
		(I)  ti = false
		(II) party_id = 1
	(c) under #[network], set all parameters to the same values used in Party0.toml
	(d) under #[LOGISTIC REGRESSION], set all parameters to the same values used in Party0.toml
	(e) use the same FOLD NO. as was decided in (3)(f)
	(f) if training with BC-TCGA, under #[BC-TCGA] verify that:
		(I)   x_input_path = "/inputs/BC_TCGA_5_folds/<FOLD NO.>X_train_share1.csv" 
		(II)  y_input_path = "/inputs/BC_TCGA_5_folds/<FOLD NO.>y_train_share1.csv"
		(III) output_path = "/weights/BC_TCGA_5_folds/fold_<FOLD NO.>_weights.csv"
		(IV)  all subsequent parameters in the section are un-commented
		(V)   verify that all parameters under #[GSE2034] are commented
	(g) if training with GSE2034, under #[GSE2034] verify that:
		(I)   x_input_path = "/inputs/GSE2034_5_folds/<FOLD NO.>X_train_share1.csv" 
		(II)  y_input_path = "/inputs/GSE2034_5_folds/<FOLD NO.>y_train_share1.csv"
		(III) output_path = "/weights/GSE2034_5_folds/fold_<FOLD NO.>_weights.csv"
		(IV)  all subsequent parameters in the section are un-commented
		(V)   verify that all parameters under #[BC-TCGA] are commented

(5) EXECUTION: The Trusted Initializer must be running before Parties 0,1 begin. 
			   The order in which Party 0 and 1 begin does not matter.
	
	(a) On the Trusted Initializer machine, from the main project directory, enter the command:

			./target/release/idash2019_rust settings/TI.toml

	(b) On the Party 0 machine, from the main project directory, enter the command:

			./target/release/idash2019_rust settings/Party0.toml

	(c) On the Party 1 machine, from the main project directory, enter the command:
	
			./target/release/idash2019_rust settings/Party1.toml

	NOTE: Execution MUST be done from the main project directory if relative paths are used in the .toml files

_____________________________________________________________________________________

 TEST THE ACCURACY OF A TRAINED MODEL
_____________________________________________________________________________________

This step should be performed by Party 0 and/or Party1 AFTER execution of the
logistic regression model has completely terminated.

(1) From the main project directory, navigate to the directory called "python"
(2) Open the script "accuracy_test.py" in a text editor
(3) If the training was done on BC-TCGA, ensure that:
	(a) lines 44-46 are un-commented
	(b) lines 48-50 are commented
(4) If the training was done on GSE2034, ensure that:
	(a) lines 44-46 are commented
	(b) lines 48-50 are un-commented
(5) If the training was done on a custom data set, manually enter paths to the following files:
	(a) weights_path = path to the output of the logistic regression model
	(b) x_test_matrix_path = path to the in-the-clear instances reserved for testing
	(c) y_test_matrix_path = path to the in-the-clear classifications corresponding to the test instances
	(d) and comment out lines 44-50
(6) Back in the "python" directory, enter the command: python accuracy_test.py <FOLD NO.>
(7) Stdout will show: "Correct predictions: {}, Total test cases: {}, Accuracy: {}"


____________________________________________________________________________________

   CONFIGURE A NEW DATA SET FOR SECURE LR TRAINING
____________________________________________________________________________________

In order for the parties to run computations on a data set, the data must be 
encrypted beforehand by the data owners (or -- for simulation -- a single data owner) based on mutually-agreed-upon parameters. These parameters are classified and described below:
__________________________________________________________________________________________________

CHOSEN PARAMETERS: These parameters are selected by the data owners

(1) decimal_precision : the number of bits reserved for representing the fractional component of real-valued inputs. Based on our experiments, 10 is sufficient for most cases. The larger this value is, the more precise fractional numbers can be. However, increasing this value too high increases the probability of failure of the local truncation prtocol. To avoid this, use the smallest reasonable value to represent the data.

(2) integer_precision : a sufficiently large number of bits to represent the largest possible number that can occur during execution. If unsure, set this value to (64 - decimal_precision). Reducing this value reduces the communication cost of the activation function, so a best estimate is preferable to choosing the max. If a value is created during runtime that is too large to be represented by integer_precision bits, the activation function will mis-classify the value with a certain probability.

(3) learning_rate : an empirically-derived constant that affects the degree to which the weights are affected by new information. Our experiments show that 0.001 is ideal for BC-TCGA and GSE_2034, but this will not be the case for all data sets. 

(4) iterations : the number times to iterate through the entire training set. Early stopping criteria are commonly used to halt execution of a logistic regression model, so the number of iterations does not need to be specified. However, in the context of privacy preserving machine learning, such a criterion would leak information about the underlying data. So a fixed value must be chosen. In our experiments, ~250 is sufficient for most data sets, but some will converge in 5 to 10.

____________________________________________________________________________________________________

DERIVED PARAMETERS: These parameters are functions of the data set and the chosen parameters

(5) attribute_count : the number of attributes (columns) in the data set, excluding the class attribute

(6) instance_count : the number of instances (rows) in the data set

(7) add_shares_per_iter : the number of additive shares over the ring Z_2^64 that need to be distributed by the Trusted Initializer at each iteration of the logistic regression model

(8) xor_shares_per_iter : the number of xor shares (groupings of 64 shares over the binary field) that need to be distributed by the Trusted Initializer at each iteration of the logistic regression model

_____________________________________________________________________________________________________

HOW TO DERIVE add_shares_per_iter AND xor_shares_per_iter:

Each secure multiplication that is performed requires one additive share. Likewise, each secure 64-bit bitiwse AND requires one xor share. All subprotocols in the logistic regression model are built from these primitives and therefore require a specific combination of additive and xor sharings. The total number of shares needed per iteration is the sum of all shares needed by each subprotocol. The package includes a script to perform this calculation for you.

(1) From the main project directory, navigate to /python/
(2) Open count_ti_shares.py in a text editor
(3) Find main near the bottom of the file. Specifically, lines 59-70
(4) Fill out the following fields with the parameters you've already chosen/derived:
	-decimal_precision = ??
    -integer_precision = ?? 
	-attribute_count = ??
    -instance_count = ??
    -iterations = ??
(5) From the /python/ directory, run the script with: python count_ti_shares.py
(6) Stdout will show the total shares needed for the entire model and the shares per iteration. The shares per iteration are the ones to use in the settings files.

______________________________________________________________________________________________________

FORMATTING THE DATA SET

// TODO


______________________________________________________________________________________________________

SECRET SHARING THE DATA SET



// TODO

_______________________________________________________________________________________________________

CONFIGURING THE SETTINGS FILES


// TODO





	




